1. Uruchomienie lokalnie
certy
dotnet dev-certs https --trust

2. Doker (uzupełnić)

3. Kubernates
Instal Docker Desktop
login

kubectl version

3.1 Setup platformservice:
Set DockerFile in proj, check dll name. (file must have name Dockerfile)

docker build -t kmazanek/platformservice .
//Check run
docker run -p 8080:80 kmazanek/commandservice
docker push kmazanek/platformservice
kubectl apply -f platforms-depl.yaml

Force to refresh image:
kubectl rollout restart deployment platforms-depl

3.2 Add node port: 

kubectl apply -f platforms-np-srv.yaml

kubectl get deployments
kubectl get pods
kubectl get services

3.3 Setup commandservice:

docker build -t kmazanek/commandservice .
docker push kmazanek/commandservice
kubectl apply -f commands-depl.yaml

Force to refresh image:
kubectl rollout restart deployment commands-depl

3.4 Setup ngres Ip gateway

Ustawienie:

//https://kubernetes.github.io/ingress-nginx/deploy/#quick-start
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.1/deploy/static/provider/cloud/deploy.yaml

Sprawdzanie:

kubectl get namespace

kubectl get pods --namespace=ingress-nginx

kubectl get services

kubectl get services --namespace=ingress-nginx

Stworzyć kontroler ingress

Plik z jego config ingress-srv.yaml definiuje routing z acme.com

Otwórz plik
C:\Windows\System32\drivers\etc\hosts
w edytorze
dodać wpis
127.0.0.1 acme.com

kubectl apply -f ingress-srv.yaml

Test routes in insomnia
wpisać acme.com w Ip
fail
127.0.0.3 acme.com
fail
w admin powerShell
NET STOP IISADMIN
fail
Wyłączenie IIS w funkcjach Win10
ok

3.5 SQL container:

kubectl get storageclass

There is 3 storage concepts:

1. Persistent Volume Claim (Main for dev)

2. Persistent Volume

3. Storage Class

Make file local-pvc.yaml; local Persistent Volume Claim

BTW cd, ls (cli commands) :)

kubectl apply -f local-pvc.yaml

kubectl get pvc

3.6 Add Kubernates secret (password should not be in configs)

kubectl create secret generic mssql --from-literal=SA_PASSWORD="pa55wOrd!"

3.7 deployment file for mssql

Create file

kubectl apply -f mssql-plat-depl.yaml

kubectl get services

NAME                      TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
commands-clusterip-srv    ClusterIP      10.103.201.18   <none>        80/TCP           3d7h
kubernetes                ClusterIP      10.96.0.1       <none>        443/TCP          4d6h
mssql-clusterip-srv       ClusterIP      10.103.8.210    <none>        1433/TCP         99s
mssql-loadbalancer        LoadBalancer   10.107.58.187   localhost     1433:32054/TCP   73s
platformnpservice-srv     NodePort       10.98.178.139   <none>        80:31773/TCP     3d6h
platforms-clusterip-srv   ClusterIP      10.111.54.239   <none>        80/TCP           3d8h

kubectl get pods

NAME                              READY   STATUS             RESTARTS      AGE 
commands-depl-6d65567cf6-69clx    1/1     Running            5 (37m ago)   3d8h
mssql-depl-75d77f44fb-6mgsl       0/1     ImagePullBackOff   0             11m 
platforms-depl-7889987db5-dbmg2   1/1     Running            5 (37m ago)   3d7h

ImagePullBackOff fail

kubectl describe pod mssql-depl-75d77f44fb-6mgsl

this logs helped
there was mistaken letter in 
mcr.micorsoft.com/mssql/server:2017-latest
mcr.microsoft.com/mssql/server:2017-latest

kubectl get pods

NAME                              READY   STATUS    RESTARTS      AGE
commands-depl-6d65567cf6-69clx    1/1     Running   5 (70m ago)   3d8h
mssql-depl-856b8c48fd-bz4xq       1/1     Running   0             2m9s
platforms-depl-7889987db5-dbmg2   1/1     Running   5 (70m ago)   3d8h

:)

Check with ManagmentStudio:
Server name: localhost, 1433
Authentication: SQl Server Authentication
password: from secret

It connects, no db.

Set PlatformService to use SqlServer for peoduction

1. Add connectionString for production
then add init in program setup
test 
dotnet run --project .\PlatformService\
should run inMem db
ctrl+c to close